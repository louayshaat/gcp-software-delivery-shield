steps:
# build
- id: "Build the image"
  name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', 'us-central1-docker.pkg.dev/core-demos/sds/new', '.' ]
#Run a vulnerability scan at _SECURITY level
- id: scan
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    (gcloud artifacts docker images scan     us-central1-docker.pkg.dev/core-demos/sds/new     --location us     --format="value(response.scan)") > /workspace/scan_id.txt
#Analyze the result of the scan
- id: severity check
  name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
      gcloud artifacts docker images list-vulnerabilities $(cat /workspace/scan_id.txt)       --format="value(vulnerability.effectiveSeverity)" | if grep -Fxq XCRITICAL;       then echo "Failed vulnerability check for CRITICAL level" && exit 1; else echo "No CRITICAL vulnerability found, congrats !" && exit 0; fi
#Retag
- id: "retag"
  name: 'gcr.io/cloud-builders/docker'
  args: ['tag',  'us-central1-docker.pkg.dev/core-demos/sds/new', 'us-central1-docker.pkg.dev/core-demos/sds/new:good']
#pushing to artifact registry
- id: "push to registry"
  name: 'gcr.io/cloud-builders/docker'
  args: ['push',  'us-central1-docker.pkg.dev/core-demos/sds/new:good']

#Sign the image only if the previous severity check passes
- name: 'gcr.io/core-demos/cloudbuild-attestor'
  id: 'Attest Image Binary Auth'
  entrypoint: 'sh'
  args:
    - -xe
    - -c
    - |-
      FQ_DIGEST=$(gcloud container images describe --format 'value(image_summary.fully_qualified_digest)' us-central1-docker.pkg.dev/core-demos/sds/new:good)
      /scripts/create_attestation.sh \
      -p "core-demos" \
      -i "$${FQ_DIGEST}" \
      -a "sds" \
      -v "1" \
      -k "lab-key" \
      -l "global" \
      -r "binauthz"

#Create Manifest
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'Generate Kubernetes manifest'
  entrypoint: /bin/sh
  args:
    - '-c'
    - |-
      DIGEST=$(gcloud container images describe --format 'value(image_summary.digest)' us-central1-docker.pkg.dev/core-demos/sds/new:good)
      sed "s/DIGEST/$${DIGEST}/g" manifests/app.yaml.tpl > manifests/app.yaml


# deploy container image to GKE
- name: 'gcr.io/cloud-builders/kubectl'
  id: 'Deploy Kubernetes Manifest to GKE'
  args: [ 'apply', '-f', 'manifests/app.yaml' ]
  env:
    - 'CLOUDSDK_COMPUTE_REGION=europe-west1'
    - 'CLOUDSDK_CONTAINER_CLUSTER=standard'

options:
 requestedVerifyOption: "VERIFIED"
